import json
import string

GENERATED_WARNING = '# This file is automatically generated by generate.py using api.json\n'

INIT_PY_TEMPLATE = string.Template('''
from . import $resourceNames
''')

RESOURCE_CLASS_TEMPLATE = string.Template('''
class $resourceName:
    def __init__(self, dispatcher=None):
        self.dispatcher = dispatcher
''')

RESOURCE_METHOD_TEMPLATE = string.Template('''
    def $name(self, params={}):
        return self.dispatcher.$method('$url', params)
''')

RESOURCE_METHOD_TEMPLATE_WITH_ARGS = string.Template('''
    def $name(self, $args, params={}):
        path = '$url' % ($args)
        return self.dispatcher.$method(path, params)
''')

api = json.loads(open('api.json', 'r').read())

resourceNames = []
for resourceName, resource in api['resources'].iteritems():
    resourceNames.append(resourceName)

    resource_py = open('asana/resources/' + resourceName + '.py', 'w')
    resource_py.write(GENERATED_WARNING)
    resource_py.write(RESOURCE_CLASS_TEMPLATE.substitute(resourceName=resourceName.capitalize()))

    if 'methods' in resource:
        for methodName, method in resource['methods'].iteritems():
            if 'args' in method and len(method['args']) > 0:
                resource_py.write(RESOURCE_METHOD_TEMPLATE_WITH_ARGS.substitute(
                    name=methodName,
                    method=method['method'],
                    url=method['url'],
                    args=', '.join(method['args'])
                ))
            else:
                resource_py.write(RESOURCE_METHOD_TEMPLATE.substitute(
                    name=methodName,
                    method=method['method'],
                    url=method['url']
                ))

    resource_py.close()

resourceNames.sort()

init_py = open('asana/resources/__init__.py', 'w')
init_py.write(GENERATED_WARNING)
init_py.write(INIT_PY_TEMPLATE.substitute(resourceNames=', '.join(resourceNames)))
init_py.close()
